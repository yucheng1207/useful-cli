{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["// @flow\n\nvar interpret = require('format-message-interpret')\nvar parse = require('format-message-parse')\nvar plurals = require('format-message-interpret/plurals')\nvar supportedExp = new RegExp(\n  '^(' + Object.keys(plurals).join('|') + ')\\\\b'\n)\n\n/*::\nimport type { Types } from 'format-message-interpret'\nimport type { AST } from 'format-message-parse'\ntype Options = {\n  types: Types\n}\ntype Internals = {\n  ast: AST,\n  format: (args?: Object) => string,\n  locale: string,\n  locales?: string | string[],\n  toParts?: (args?: Object) => any[],\n  options?: Options\n}\n*/\n\nvar internals/*: WeakMap<Object, Internals> */ = new WeakMap()\n\n/*!\n * Intl.MessageFormat prollyfill\n * Copyright(c) 2015 Andy VanWagoner\n * MIT licensed\n **/\nfunction MessageFormat (\n  pattern/*: string */,\n  locales/*:: ?: string | string[] */,\n  options/*:: ?: Options */\n) {\n  if (!(this instanceof MessageFormat) || internals.has(this)) {\n    throw new TypeError('calling MessageFormat constructor without new is invalid')\n  }\n  var ast = parse(pattern)\n  internals.set(this, {\n    ast: ast,\n    format: interpret(ast, locales, options && options.types),\n    locale: MessageFormat.supportedLocalesOf(locales)[0] || 'en',\n    locales: locales,\n    options: options\n  })\n}\nmodule.exports = MessageFormat\n\n// $FlowFixMe It thinks `value` needs to be defined for format\nObject.defineProperties(MessageFormat.prototype, {\n  format: {\n    configurable: true,\n    get: function format () {\n      var values = internals.get(this)\n      if (!values) throw new TypeError('MessageFormat.prototype.format called on value that\\'s not an object initialized as a MessageFormat')\n      return values.format\n    }\n  },\n  formatToParts: {\n    configurable: true,\n    writable: true,\n    value: function formatToParts (args/*:: ?: Object */) {\n      var values = internals.get(this)\n      if (!values) throw new TypeError('MessageFormat.prototype.formatToParts called on value that\\'s not an object initialized as a MessageFormat')\n      var frmt = values.toParts || (values.toParts = interpret.toParts(\n        values.ast,\n        values.locales,\n        values.options && values.options.types\n      ))\n      return frmt(args)\n    }\n  },\n  resolvedOptions: {\n    configurable: true,\n    writable: true,\n    value: function resolvedOptions () {\n      var values = internals.get(this)\n      if (!values) throw new TypeError('MessageFormat.prototype.resolvedOptions called on value that\\'s not an object initialized as a MessageFormat')\n      return {\n        locale: values.locale\n      }\n    }\n  }\n})\n\n/* istanbul ignore else */\nif (typeof Symbol !== 'undefined') {\n  Object.defineProperty(MessageFormat.prototype, Symbol.toStringTag, { value: 'Object' })\n}\n\nObject.defineProperties(MessageFormat, {\n  supportedLocalesOf: {\n    configurable: true,\n    writable: true,\n    value: function supportedLocalesOf (requestedLocales/*:: ?: string | string[] */) {\n      return [].concat(\n        Intl.NumberFormat.supportedLocalesOf(requestedLocales),\n        Intl.DateTimeFormat.supportedLocalesOf(requestedLocales),\n        Intl.PluralRules ? Intl.PluralRules.supportedLocalesOf(requestedLocales) : [],\n        [].concat(requestedLocales || []).filter(function (locale) {\n          return supportedExp.test(locale)\n        })\n      ).filter(function (v, i, a) { return a.indexOf(v) === i })\n    }\n  }\n})\n"]}